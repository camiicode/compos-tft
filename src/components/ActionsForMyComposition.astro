<div class="flex flex-wrap justify-center gap-2">
    <button id="save-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Guardar composición">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z" />
        </svg>                          
    </button>
    <button id="download-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Exportar composición">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
            <path fill-rule="evenodd" d="M12 2.25a.75.75 0 0 1 .75.75v11.69l3.22-3.22a.75.75 0 1 1 1.06 1.06l-4.5 4.5a.75.75 0 0 1-1.06 0l-4.5-4.5a.75.75 0 1 1 1.06-1.06l3.22 3.22V3a.75.75 0 0 1 .75-.75Zm-9 13.5a.75.75 0 0 1 .75.75v2.25a1.5 1.5 0 0 0 1.5 1.5h13.5a1.5 1.5 0 0 0 1.5-1.5V16.5a.75.75 0 0 1 1.5 0v2.25a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V16.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd" />
        </svg>                          
    </button>
    <label for="upload-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base cursor-pointer" title="Importar composición">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
            <path fill-rule="evenodd" d="M11.47 2.47a.75.75 0 0 1 1.06 0l4.5 4.5a.75.75 0 0 1-1.06 1.06l-3.22-3.22V16.5a.75.75 0 0 1-1.5 0V4.81L8.03 8.03a.75.75 0 0 1-1.06-1.06l4.5-4.5ZM3 15.75a.75.75 0 0 1 .75.75v2.25a1.5 1.5 0 0 0 1.5 1.5h13.5a1.5 1.5 0 0 0 1.5-1.5V16.5a.75.75 0 0 1 1.5 0v2.25a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V16.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd" />
        </svg>                          
    </label>
    <input type="file" id="upload-comp" accept=".json" class="hidden" />
    <button id="clear-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Limpiar Tablero">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
        </svg>                          
    </button>
</div>

<script>
    interface StoredChampion {
        id: string;
        name: string;
        icon: string;
        cost: number;
        level: number;
        position: {
            row: number;
            col: number;
        };
        items?: string[];
    }

    // Función para actualizar el estado visual de los campeones
    function updateChampionsVisualState(): void {
        const championCards = document.querySelectorAll('.champion-card');
        championCards.forEach(card => {
            const img = card.querySelector('img');
            if (!img) return;
            
            const championId = img.getAttribute('data-champion-id');
            if (!championId) return;
            
            // Actualizar el estado visual del campeón en la lista
            const championItem = document.querySelector(`.champion-item[data-champion-id="${championId}"]`);
            if (championItem) {
                championItem.classList.add('opacity-50');
            }
        });
    }

    // Función para obtener la composición actual del tablero
    function getCurrentComposition(): StoredChampion[] {
        const composition: StoredChampion[] = [];
        const cells = document.querySelectorAll('.hex-cell');
        
        console.log(`Encontradas ${cells.length} celdas en el tablero`);
        
        cells.forEach(cell => {
            const championCard = cell.querySelector('.champion-card');
            if (!championCard) return;
            
            const img = championCard.querySelector('img');
            if (!img) return;
            
            const championId = img.getAttribute('data-champion-id');
            if (!championId) {
                console.log('No se encontró el ID del campeón');
                return;
            }
            
            console.log(`Procesando campeón con ID: ${championId}`);
            
            const row = parseInt(cell.getAttribute('data-row') || '0');
            const col = parseInt(cell.getAttribute('data-col') || '0');
            
            // Obtener el nivel de estrellas
            const levelElement = championCard.querySelector('.star-level');
            const starsText = levelElement?.textContent || '⭐';
            const level = starsText.length;
            console.log(`Nivel de estrellas: ${level} (texto: "${starsText}")`);
            
            // Obtener el costo del campeón desde la lista de campeones
            const championItem = document.querySelector(`.champion-item[data-item-id="${championId}"]`);
            const costElement = championItem?.querySelector('p');
            const costMatch = costElement?.textContent?.match(/\d+/);
            const cost = costMatch ? parseInt(costMatch[0]) : 1;
            console.log(`Costo del campeón: ${cost}`);
            
            // Obtener los objetos del campeón
            const items: string[] = [];
            const itemsContainer = championCard.querySelector('.items-container');
            if (itemsContainer) {
                itemsContainer.querySelectorAll('img').forEach(itemImg => {
                    const itemId = itemImg.getAttribute('data-item-id');
                    if (itemId) {
                        items.push(itemId);
                        console.log(`Objeto encontrado: ${itemId}`);
                    }
                });
            }
            
            composition.push({
                id: championId,
                name: img.getAttribute('alt') || '',
                icon: img.getAttribute('src') || '',
                cost,
                level,
                position: { row, col },
                items
            });
            
            console.log(`Campeón añadido a la composición: ${championId} en posición (${row},${col}) con ${items.length} objetos y nivel ${level}`);
        });
        
        console.log('Composición actual:', composition);
        return composition;
    }

    // Función para mostrar un toast de retroalimentación
    function showToast(message: string, isError = false) {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 ${isError ? 'bg-red-500' : 'bg-green-500'} text-white px-4 py-2 rounded shadow-lg z-50 transition-opacity`;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // Función para guardar la composición actual
    function saveComposition() {
        console.log('Iniciando guardado de composición');
        const composition = getCurrentComposition();
        
        if (composition.length === 0) {
            console.log('No hay campeones en el tablero para guardar');
            showToast('No hay campeones en el tablero para guardar', true);
            return;
        }
        
        // Guardar en localStorage
        const compositionJson = JSON.stringify(composition);
        console.log('Guardando en localStorage:', compositionJson);
        localStorage.setItem('tft-composition', compositionJson);
        
        // Verificar que se guardó correctamente
        const savedComp = localStorage.getItem('tft-composition');
        if (savedComp) {
            console.log('Composición guardada correctamente en localStorage');
            showToast('Composición guardada correctamente');
        } else {
            console.error('Error al guardar la composición en localStorage');
            showToast('Error al guardar la composición', true);
        }
    }
    
    // Función para descargar la composición como JSON
    function downloadComposition() {
        const composition = getCurrentComposition();
        
        if (composition.length === 0) {
            showToast('No hay campeones en el tablero', true);
            return;
        }
        
        // Crear un objeto Blob con los datos y configurar el enlace de descarga
        const json = JSON.stringify(composition, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        
        // Crear un enlace temporal para la descarga
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const date = new Date();
        const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
        a.download = `tft-composition-${formattedDate}.json`;
        
        // Simular clic para iniciar descarga
        document.body.appendChild(a);
        a.click();
        
        // Limpiar
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast('Composición descargada correctamente');
    }
    
    // Función para cargar la composición guardada en localStorage
    function loadComposition() {
        console.log('Intentando cargar la composición desde localStorage');
        const storedComp = localStorage.getItem('tft-composition');
        
        if (!storedComp) {
            console.log('No hay composición guardada en localStorage');
            return;
        }
        
        try {
            console.log('Composición encontrada en localStorage:', storedComp);
            
            // Limpiar el tablero primero
            document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
                cell.innerHTML = '';
            });
            
            const composition: StoredChampion[] = JSON.parse(storedComp);
            console.log('Composición parseada:', composition);
            
            if (composition.length === 0) {
                console.log('La composición guardada está vacía');
                return;
            }
            
            console.log(`Cargando ${composition.length} campeones en el tablero`);
            
            composition.forEach((champion, index) => {
                console.log(`Procesando campeón ${index + 1}/${composition.length}: ${champion.name}`);
                
                const { row, col } = champion.position;
                const cell = document.querySelector(`.hex-cell[data-row="${row}"][data-col="${col}"]`);
                
                if (!cell) {
                    console.log(`No se encontró la celda en la posición ${row},${col}`);
                    return;
                }
                
                const hexContent = cell.querySelector('.hex-content');
                if (!hexContent) {
                    console.log(`No se encontró el contenido de la celda en la posición ${row},${col}`);
                    return;
                }
                
                // Crear el campeón
                const championCard = document.createElement('div');
                championCard.className = 'champion-card relative';
                
                // Añadir la clase de borde según el costo
                if (champion.cost === 1) {
                    championCard.classList.add('border-gray-400');
                } else if (champion.cost === 2) {
                    championCard.classList.add('border-green-500');
                } else if (champion.cost === 3) {
                    championCard.classList.add('border-blue-500');
                } else if (champion.cost === 4) {
                    championCard.classList.add('border-purple-500');
                } else if (champion.cost >= 5) {
                    championCard.classList.add('border-orange-500');
                }
                
                // Crear la imagen del campeón
                const img = document.createElement('img');
                img.src = champion.icon;
                img.alt = champion.name;
                img.title = champion.name;
                img.className = 'w-10 h-10 sm:w-16 sm:h-16 rounded-full object-cover object-right';
                img.setAttribute('data-champion-id', champion.id);
                
                // Crear estrellas con el nivel correcto
                const levelDiv = document.createElement('div');
                levelDiv.className = 'star-level absolute -top-2 sm:-top-5 left-1/2 transform -translate-x-1/2 text-yellow-400 text-xs sm:text-base';
                levelDiv.textContent = '⭐'.repeat(champion.level);
                console.log(`Nivel de estrellas establecido a ${champion.level} para ${champion.name}`);
                
                // Crear controles
                const controlsDiv = document.createElement('div');
                controlsDiv.className = 'champion-controls absolute -top-1 sm:-top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10';
                
                const decreaseBtn = document.createElement('button');
                decreaseBtn.className = 'decrease-level bg-red-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                decreaseBtn.title = 'Disminuir nivel';
                decreaseBtn.textContent = '-';
                
                const increaseBtn = document.createElement('button');
                increaseBtn.className = 'increase-level bg-green-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                increaseBtn.title = 'Aumentar nivel';
                increaseBtn.textContent = '+';
                
                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-champion bg-gray-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                removeBtn.title = 'Eliminar campeón';
                removeBtn.textContent = '×';
                
                controlsDiv.appendChild(decreaseBtn);
                controlsDiv.appendChild(increaseBtn);
                controlsDiv.appendChild(removeBtn);
                
                // Agregar todo al campeón
                championCard.appendChild(img);
                championCard.appendChild(levelDiv);
                championCard.appendChild(controlsDiv);
                
                // Agregar ítems si existen
                if (champion.items && champion.items.length > 0) {
                    console.log(`Añadiendo ${champion.items.length} objetos al campeón ${champion.name}`);
                    
                    const itemsContainer = document.createElement('div');
                    itemsContainer.className = 'items-container absolute -bottom-4 sm:-bottom-8 left-1/2 transform -translate-x-1/2 flex justify-center gap-1';
                    
                    champion.items.forEach(itemId => {
                        console.log(`Añadiendo objeto ${itemId} al campeón ${champion.name}`);
                        
                        // Buscar el objeto en la lista para obtener su información
                        const itemElement = document.querySelector(`.item-card[data-item-id="${itemId}"]`);
                        let itemIcon = `/items/${itemId}.png`;
                        let itemName = `Item ${itemId}`;
                        
                        if (itemElement) {
                            const itemImg = itemElement.querySelector('img');
                            if (itemImg) {
                                itemIcon = itemImg.getAttribute('src') || itemIcon;
                                itemName = itemImg.getAttribute('alt') || itemName;
                            }
                        }
                        
                        const itemImg = document.createElement('img');
                        itemImg.src = itemIcon;
                        itemImg.alt = itemName;
                        itemImg.title = itemName;
                        itemImg.className = 'w-4 h-4 sm:w-6 sm:h-6 object-cover object-right border-2 border-yellow-400';
                        itemImg.setAttribute('data-item-id', itemId);
                        itemImg.onerror = function() {
                            this.onerror = null;
                            this.src = 'https://ddragon.leagueoflegends.com/cdn/14.1.1/img/item/1001.png';
                            console.log('Error al cargar imagen para', this.alt);
                        };
                        
                        // Añadir evento para eliminar el objeto al hacer clic
                        itemImg.addEventListener('click', function(e) {
                            e.stopPropagation();
                            itemImg.remove();
                            
                            // Si no quedan objetos, eliminar el contenedor
                            if (itemsContainer && itemsContainer.children.length === 0) {
                                itemsContainer.remove();
                            }
                        });
                        
                        itemsContainer.appendChild(itemImg);
                    });
                    
                    championCard.appendChild(itemsContainer);
                }
                
                hexContent.appendChild(championCard);
                
                // Configurar los controles del campeón
                setupChampionControls(championCard);
                
                // Mostrar controles al pasar el mouse
                championCard.addEventListener('mouseenter', function() {
                    const controls = championCard.querySelector('.champion-controls');
                    if (controls) controls.classList.remove('opacity-0');
                });
                
                championCard.addEventListener('mouseleave', function() {
                    const controls = championCard.querySelector('.champion-controls');
                    if (controls) controls.classList.add('opacity-0');
                });
                
                console.log(`Campeón ${champion.name} cargado correctamente en la posición (${row},${col}) con costo ${champion.cost}`);
            });
            
            // Actualizar el estado visual
            updateChampionsVisualState();
            
            showToast('Composición cargada correctamente');
        } catch (error) {
            console.error('Error al cargar la composición:', error);
            showToast('Error al cargar la composición', true);
        }
    }
    
    function uploadComposition(event: Event) {
        const input = event.target as HTMLInputElement;
        
        if (!input.files || input.files.length === 0) {
            return;
        }
        
        const file = input.files[0];
        const reader = new FileReader();
        
        reader.onload = function(e) {
            try {
                const text = e.target?.result as string;
                const composition: StoredChampion[] = JSON.parse(text);
                
                // Limpiar el tablero primero
                document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
                    cell.innerHTML = '';
                });
                
                // Cargar la composición
                composition.forEach(champion => {
                    const { row, col } = champion.position;
                    const cell = document.querySelector(`.hex-cell[data-row="${row}"][data-col="${col}"]`);
                    
                    if (!cell) return;
                    
                    const hexContent = cell.querySelector('.hex-content');
                    if (!hexContent) return;
                    
                    // Crear el campeón
                    const championCard = document.createElement('div');
                    championCard.className = 'champion-card relative';
                    
                    // Añadir la clase de borde según el costo
                    if (champion.cost === 1) {
                        championCard.classList.add('border-gray-400');
                    } else if (champion.cost === 2) {
                        championCard.classList.add('border-green-500');
                    } else if (champion.cost === 3) {
                        championCard.classList.add('border-blue-500');
                    } else if (champion.cost === 4) {
                        championCard.classList.add('border-purple-500');
                    } else if (champion.cost >= 5) {
                        championCard.classList.add('border-orange-500');
                    }
                    
                    // Crear la imagen del campeón
                    const img = document.createElement('img');
                    img.src = champion.icon;
                    img.alt = champion.name;
                    img.title = champion.name;
                    img.className = 'w-10 h-10 sm:w-16 sm:h-16 rounded-full object-cover object-right';
                    img.setAttribute('data-champion-id', champion.id);
                    
                    // Crear estrellas
                    const levelDiv = document.createElement('div');
                    levelDiv.className = 'star-level absolute -top-2 sm:-top-5 left-1/2 transform -translate-x-1/2 text-yellow-400 text-xs sm:text-base';
                    levelDiv.textContent = '⭐'.repeat(champion.level);
                    
                    // Crear controles
                    const controlsDiv = document.createElement('div');
                    controlsDiv.className = 'champion-controls absolute -top-1 sm:-top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10';
                    
                    const decreaseBtn = document.createElement('button');
                    decreaseBtn.className = 'decrease-level bg-red-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    decreaseBtn.title = 'Disminuir nivel';
                    decreaseBtn.textContent = '-';
                    
                    const increaseBtn = document.createElement('button');
                    increaseBtn.className = 'increase-level bg-green-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    increaseBtn.title = 'Aumentar nivel';
                    increaseBtn.textContent = '+';
                    
                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'remove-champion bg-gray-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    removeBtn.title = 'Eliminar campeón';
                    removeBtn.textContent = '×';
                    
                    controlsDiv.appendChild(decreaseBtn);
                    controlsDiv.appendChild(increaseBtn);
                    controlsDiv.appendChild(removeBtn);
                    
                    // Agregar todo al campeón
                    championCard.appendChild(img);
                    championCard.appendChild(levelDiv);
                    championCard.appendChild(controlsDiv);
                    
                    // Agregar ítems si existen
                    if (champion.items && champion.items.length > 0) {
                        const itemsContainer = document.createElement('div');
                        itemsContainer.className = 'items-container absolute -bottom-4 sm:-bottom-8 left-1/2 transform -translate-x-1/2 flex justify-center gap-1';
                        
                        champion.items.forEach(itemId => {
                            // Buscar el objeto en la lista para obtener su información
                            const itemElement = document.querySelector(`.item-card[data-item-id="${itemId}"]`);
                            let itemIcon = `/items/${itemId}.png`;
                            let itemName = `Item ${itemId}`;
                            
                            if (itemElement) {
                                const itemImg = itemElement.querySelector('img');
                                if (itemImg) {
                                    itemIcon = itemImg.getAttribute('src') || itemIcon;
                                    itemName = itemImg.getAttribute('alt') || itemName;
                                }
                            }
                            
                            const itemImg = document.createElement('img');
                            itemImg.src = itemIcon;
                            itemImg.alt = itemName;
                            itemImg.title = itemName;
                            itemImg.className = 'w-4 h-4 sm:w-6 sm:h-6 object-cover object-right border-2 border-yellow-400';
                            itemImg.setAttribute('data-item-id', itemId);
                            itemImg.onerror = function() {
                                this.onerror = null;
                                this.src = 'https://ddragon.leagueoflegends.com/cdn/14.1.1/img/item/1001.png';
                                console.log('Error al cargar imagen para', this.alt);
                            };
                            
                            // Añadir evento para eliminar el objeto al hacer clic
                            itemImg.addEventListener('click', function(e) {
                                e.stopPropagation();
                                itemImg.remove();
                                
                                // Si no quedan objetos, eliminar el contenedor
                                if (itemsContainer && itemsContainer.children.length === 0) {
                                    itemsContainer.remove();
                                }
                            });
                            
                            itemsContainer.appendChild(itemImg);
                        });
                        
                        championCard.appendChild(itemsContainer);
                    }
                    
                    hexContent.appendChild(championCard);
                    
                    // Configurar los controles del campeón
                    setupChampionControls(championCard);
                    
                    // Mostrar controles al pasar el mouse
                    championCard.addEventListener('mouseenter', function() {
                        const controls = championCard.querySelector('.champion-controls');
                        if (controls) controls.classList.remove('opacity-0');
                    });
                    
                    championCard.addEventListener('mouseleave', function() {
                        const controls = championCard.querySelector('.champion-controls');
                        if (controls) controls.classList.add('opacity-0');
                    });
                });
                
                // Actualizar el estado visual
                updateChampionsVisualState();
                
                showToast('Composición importada correctamente');
            } catch (error) {
                console.error('Error al importar la composición:', error);
                showToast('Error al importar la composición', true);
            }
            
            // Resetear el input
            input.value = '';
        };
        
        reader.onerror = function() {
            showToast('Error al leer el archivo', true);
            // Resetear el input
            input.value = '';
        };
        
        reader.readAsText(file);
    }
    
    // Función para limpiar todo el tablero
    function clearBoard() {
        document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
            cell.innerHTML = '';
        });
        updateChampionsVisualState();
        showToast('Tablero limpiado correctamente');
    }
    
    // Función para configurar los controles de un campeón
    function setupChampionControls(championCard: Element) {
        console.log('Configurando controles del campeón');
        
        const increaseBtn = championCard.querySelector('.increase-level');
        const decreaseBtn = championCard.querySelector('.decrease-level');
        const removeBtn = championCard.querySelector('.remove-champion');
        const levelElement = championCard.querySelector('.star-level');
        
        console.log('Elementos encontrados:', {
            increaseBtn: !!increaseBtn,
            decreaseBtn: !!decreaseBtn,
            removeBtn: !!removeBtn,
            levelElement: !!levelElement
        });
        
        // Solo establecer el nivel inicial a 1 si no hay texto (nuevo campeón)
        if (levelElement && (!levelElement.textContent || levelElement.textContent.trim() === '')) {
            levelElement.textContent = '⭐';
            console.log('Nivel inicial establecido a 1 estrella para nuevo campeón');
        } else if (levelElement) {
            console.log(`Manteniendo nivel existente: ${levelElement.textContent}`);
        }
        
        if (increaseBtn && levelElement) {
            increaseBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const starsText = levelElement.textContent || '⭐';
                const currentLevel = starsText.length;
                console.log(`Aumentando nivel de ${currentLevel} a ${currentLevel + 1}`);
                
                if (currentLevel < 3) {
                    levelElement.textContent = '⭐'.repeat(currentLevel + 1);
                    console.log(`Nivel actualizado a ${currentLevel + 1} estrellas`);
                } else {
                    console.log('Ya está en el nivel máximo (3 estrellas)');
                }
            });
        }
        
        if (decreaseBtn && levelElement) {
            decreaseBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const starsText = levelElement.textContent || '⭐';
                const currentLevel = starsText.length;
                console.log(`Disminuyendo nivel de ${currentLevel} a ${currentLevel - 1}`);
                
                if (currentLevel > 1) {
                    levelElement.textContent = '⭐'.repeat(currentLevel - 1);
                    console.log(`Nivel actualizado a ${currentLevel - 1} estrellas`);
                } else {
                    console.log('Ya está en el nivel mínimo (1 estrella)');
                }
            });
        }
        
        if (removeBtn) {
            removeBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const hexContent = championCard.closest('.hex-content');
                if (hexContent) {
                    hexContent.innerHTML = '';
                    updateChampionsVisualState();
                    console.log('Campeón eliminado del tablero');
                }
            });
        }
    }

    // Evento para guardar la composición
    const saveBtn = document.getElementById('save-comp');
    if (saveBtn) {
        saveBtn.addEventListener('click', saveComposition);
    }
    
    // Evento para descargar la composición
    const downloadBtn = document.getElementById('download-comp');
    if (downloadBtn) {
        downloadBtn.addEventListener('click', downloadComposition);
    }
    
    // Evento para subir una composición
    const uploadInput = document.getElementById('upload-comp') as HTMLInputElement;
    if (uploadInput) {
        uploadInput.addEventListener('change', uploadComposition);
    }
    
    // Evento para limpiar el tablero
    const clearBtn = document.getElementById('clear-comp');
    if (clearBtn) {
        clearBtn.addEventListener('click', clearBoard);
    }
    
    // Cargar la composición guardada al iniciar la página
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM cargado, intentando cargar la composición guardada');
        loadComposition();
    });
</script> 