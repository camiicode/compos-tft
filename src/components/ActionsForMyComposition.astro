<div class="flex flex-wrap justify-center gap-2">
    <button id="save-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Guardar composición">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z" />
        </svg>                          
    </button>
    <button id="download-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Exportar composición">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
            <path fill-rule="evenodd" d="M12 2.25a.75.75 0 0 1 .75.75v11.69l3.22-3.22a.75.75 0 1 1 1.06 1.06l-4.5 4.5a.75.75 0 0 1-1.06 0l-4.5-4.5a.75.75 0 1 1 1.06-1.06l3.22 3.22V3a.75.75 0 0 1 .75-.75Zm-9 13.5a.75.75 0 0 1 .75.75v2.25a1.5 1.5 0 0 0 1.5 1.5h13.5a1.5 1.5 0 0 0 1.5-1.5V16.5a.75.75 0 0 1 1.5 0v2.25a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V16.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd" />
        </svg>                          
    </button>
    <label for="upload-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base cursor-pointer" title="Importar composición">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
            <path fill-rule="evenodd" d="M11.47 2.47a.75.75 0 0 1 1.06 0l4.5 4.5a.75.75 0 0 1-1.06 1.06l-3.22-3.22V16.5a.75.75 0 0 1-1.5 0V4.81L8.03 8.03a.75.75 0 0 1-1.06-1.06l4.5-4.5ZM3 15.75a.75.75 0 0 1 .75.75v2.25a1.5 1.5 0 0 0 1.5 1.5h13.5a1.5 1.5 0 0 0 1.5-1.5V16.5a.75.75 0 0 1 1.5 0v2.25a3 3 0 0 1-3 3H5.25a3 3 0 0 1-3-3V16.5a.75.75 0 0 1 .75-.75Z" clip-rule="evenodd" />
        </svg>                          
    </label>
    <input type="file" id="upload-comp" accept=".json" class="hidden" />
    <button id="clear-comp" class="bg-[rgba(255,255,255,.05)] hover:bg-[rgba(255,255,255,.25)] transition-opacity text-white px-2 py-1 sm:px-4 sm:py-2 rounded text-sm sm:text-base" title="Limpiar Tablero">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
        </svg>                          
    </button>
</div>

<script>
    interface StoredChampion {
        id: string;
        name: string;
        icon: string;
        cost: number;
        level: number;
        position: {
            row: number;
            col: number;
        };
        items?: string[];
    }

    // Función para actualizar el estado visual de los campeones
    function updateChampionsVisualState(): void {
        const championCards = document.querySelectorAll('.champion-card');
        championCards.forEach(card => {
            const img = card.querySelector('img');
            if (!img) return;
            
            const championId = img.getAttribute('data-champion-id');
            if (!championId) return;
            
            // Actualizar el estado visual del campeón en la lista
            const championItem = document.querySelector(`.champion-item[data-champion-id="${championId}"]`);
            if (championItem) {
                championItem.classList.add('opacity-50');
            }
        });
    }

    // Función para obtener la composición actual del tablero
    function getCurrentComposition(): StoredChampion[] {
        const composition: StoredChampion[] = [];
        const cells = document.querySelectorAll('.hex-cell');
        
        cells.forEach(cell => {
            const championCard = cell.querySelector('.champion-card');
            if (!championCard) return;
            
            const img = championCard.querySelector('img');
            if (!img) return;
            
            const championId = img.getAttribute('data-champion-id');
            if (!championId) return;
            
            const row = parseInt(cell.getAttribute('data-row') || '0');
            const col = parseInt(cell.getAttribute('data-col') || '0');
            
            const levelElement = championCard.querySelector('.star-level');
            const level = levelElement ? levelElement.textContent?.length || 1 : 1;
            
            const costElement = championCard.querySelector('.cost-badge');
            const costMatch = costElement?.textContent?.match(/\d+/);
            const cost = costMatch ? parseInt(costMatch[0]) : 1;
            
            const items: string[] = [];
            championCard.querySelectorAll('.item-badge').forEach(itemBadge => {
                const itemId = itemBadge.getAttribute('data-item-id');
                if (itemId) items.push(itemId);
            });
            
            composition.push({
                id: championId,
                name: img.getAttribute('alt') || '',
                icon: img.getAttribute('src') || '',
                cost,
                level,
                position: { row, col },
                items
            });
        });
        
        return composition;
    }

    // Función para mostrar un toast de retroalimentación
    function showToast(message: string, isError = false) {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 ${isError ? 'bg-red-500' : 'bg-green-500'} text-white px-4 py-2 rounded shadow-lg z-50 transition-opacity`;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // Función para guardar la composición actual
    function saveComposition() {
        const composition = getCurrentComposition();
        
        // Guardar en localStorage
        localStorage.setItem('tft-composition', JSON.stringify(composition));
        
        // Mostrar feedback al usuario
        showToast('Composición guardada correctamente');
    }
    
    // Función para descargar la composición como JSON
    function downloadComposition() {
        const composition = getCurrentComposition();
        
        if (composition.length === 0) {
            showToast('No hay campeones en el tablero', true);
            return;
        }
        
        // Crear un objeto Blob con los datos y configurar el enlace de descarga
        const json = JSON.stringify(composition, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        
        // Crear un enlace temporal para la descarga
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const date = new Date();
        const formattedDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
        a.download = `tft-composition-${formattedDate}.json`;
        
        // Simular clic para iniciar descarga
        document.body.appendChild(a);
        a.click();
        
        // Limpiar
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast('Composición descargada correctamente');
    }
    
    // Función para cargar la composición guardada en localStorage
    function loadComposition() {
        const storedComp = localStorage.getItem('tft-composition');
        if (!storedComp) return;
        
        try {
            // Limpiar el tablero primero
            document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
                cell.innerHTML = '';
            });
            
            const composition: StoredChampion[] = JSON.parse(storedComp);
            
            composition.forEach(champion => {
                const { row, col } = champion.position;
                const cell = document.querySelector(`.hex-cell[data-row="${row}"][data-col="${col}"]`);
                
                if (!cell) return;
                
                const hexContent = cell.querySelector('.hex-content');
                if (!hexContent) return;
                
                // Crear el campeón
                const championCard = document.createElement('div');
                championCard.className = 'champion-card relative';
                
                // Crear la imagen del campeón
                const img = document.createElement('img');
                img.src = champion.icon;
                img.alt = champion.name;
                img.title = champion.name;
                img.className = 'w-10 h-10 sm:w-16 sm:h-16 rounded-full object-cover object-right';
                img.setAttribute('data-champion-id', champion.id);
                
                // Crear estrellas
                const levelDiv = document.createElement('div');
                levelDiv.className = 'star-level absolute -top-2 sm:-top-5 left-1/2 transform -translate-x-1/2 text-yellow-400 text-xs sm:text-base';
                levelDiv.textContent = '⭐'.repeat(champion.level);
                
                // Crear badge de costo
                const costDiv = document.createElement('div');
                costDiv.className = 'cost-badge absolute -bottom-1 sm:-bottom-2 left-1/2 transform -translate-x-1/2 bg-gray-800 bg-opacity-80 rounded-full px-1 py-0.5 sm:px-2 sm:py-1 text-xs sm:text-sm flex items-center';
                costDiv.innerHTML = `<span class="mr-1">🥮</span> ${champion.cost}`;
                
                // Crear controles
                const controlsDiv = document.createElement('div');
                controlsDiv.className = 'champion-controls absolute -top-1 sm:-top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10';
                
                const decreaseBtn = document.createElement('button');
                decreaseBtn.className = 'decrease-level bg-red-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                decreaseBtn.title = 'Disminuir nivel';
                decreaseBtn.textContent = '-';
                
                const increaseBtn = document.createElement('button');
                increaseBtn.className = 'increase-level bg-green-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                increaseBtn.title = 'Aumentar nivel';
                increaseBtn.textContent = '+';
                
                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-champion bg-gray-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                removeBtn.title = 'Eliminar campeón';
                removeBtn.textContent = '×';
                
                controlsDiv.appendChild(decreaseBtn);
                controlsDiv.appendChild(increaseBtn);
                controlsDiv.appendChild(removeBtn);
                
                // Agregar todo al campeón
                championCard.appendChild(img);
                championCard.appendChild(levelDiv);
                championCard.appendChild(costDiv);
                championCard.appendChild(controlsDiv);
                
                // Agregar ítems si existen
                if (champion.items && champion.items.length > 0) {
                    champion.items.forEach(itemId => {
                        const itemBadge = document.createElement('div');
                        itemBadge.className = 'item-badge absolute -right-1 sm:-right-2 -top-1 sm:-top-2 bg-gray-800 bg-opacity-80 rounded-full p-1 sm:p-2';
                        itemBadge.setAttribute('data-item-id', itemId);
                        
                        const itemImg = document.createElement('img');
                        itemImg.src = `/items/${itemId}.png`;
                        itemImg.alt = `Item ${itemId}`;
                        itemImg.className = 'w-4 h-4 sm:w-6 sm:h-6 object-cover';
                        
                        itemBadge.appendChild(itemImg);
                        championCard.appendChild(itemBadge);
                    });
                }
                
                hexContent.appendChild(championCard);
            });
            
            // Actualizar el estado visual
            updateChampionsVisualState();
            
            showToast('Composición cargada correctamente');
        } catch (error) {
            console.error('Error al cargar la composición:', error);
            showToast('Error al cargar la composición', true);
        }
    }
    
    function uploadComposition(event: Event) {
        const input = event.target as HTMLInputElement;
        
        if (!input.files || input.files.length === 0) {
            return;
        }
        
        const file = input.files[0];
        const reader = new FileReader();
        
        reader.onload = function(e) {
            try {
                const text = e.target?.result as string;
                const composition: StoredChampion[] = JSON.parse(text);
                
                // Limpiar el tablero primero
                document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
                    cell.innerHTML = '';
                });
                
                // Cargar la composición
                composition.forEach(champion => {
                    const { row, col } = champion.position;
                    const cell = document.querySelector(`.hex-cell[data-row="${row}"][data-col="${col}"]`);
                    
                    if (!cell) return;
                    
                    const hexContent = cell.querySelector('.hex-content');
                    if (!hexContent) return;
                    
                    // Crear el campeón
                    const championCard = document.createElement('div');
                    championCard.className = 'champion-card relative';
                    
                    // Crear la imagen del campeón
                    const img = document.createElement('img');
                    img.src = champion.icon;
                    img.alt = champion.name;
                    img.title = champion.name;
                    img.className = 'w-10 h-10 sm:w-16 sm:h-16 object-cover object-right';
                    img.setAttribute('data-champion-id', champion.id);
                    
                    // Crear estrellas
                    const levelDiv = document.createElement('div');
                    levelDiv.className = 'star-level absolute -top-2 sm:-top-5 left-1/2 transform -translate-x-1/2 text-yellow-400 text-xs sm:text-base';
                    levelDiv.textContent = '⭐'.repeat(champion.level);
                    
                    // Crear badge de costo
                    const costDiv = document.createElement('div');
                    costDiv.className = 'cost-badge absolute -bottom-1 sm:-bottom-2 left-1/2 transform -translate-x-1/2 bg-gray-800 bg-opacity-80 rounded-full px-1 py-0.5 sm:px-2 sm:py-1 text-xs sm:text-sm flex items-center';
                    costDiv.innerHTML = `<span class="mr-1">🥮</span> ${champion.cost}`;
                    
                    // Crear controles
                    const controlsDiv = document.createElement('div');
                    controlsDiv.className = 'champion-controls absolute -top-1 sm:-top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10';
                    
                    const decreaseBtn = document.createElement('button');
                    decreaseBtn.className = 'decrease-level bg-red-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    decreaseBtn.title = 'Disminuir nivel';
                    decreaseBtn.textContent = '-';
                    
                    const increaseBtn = document.createElement('button');
                    increaseBtn.className = 'increase-level bg-green-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    increaseBtn.title = 'Aumentar nivel';
                    increaseBtn.textContent = '+';
                    
                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'remove-champion bg-gray-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs';
                    removeBtn.title = 'Eliminar campeón';
                    removeBtn.textContent = '×';
                    
                    controlsDiv.appendChild(decreaseBtn);
                    controlsDiv.appendChild(increaseBtn);
                    controlsDiv.appendChild(removeBtn);
                    
                    // Agregar todo al campeón
                    championCard.appendChild(img);
                    championCard.appendChild(levelDiv);
                    championCard.appendChild(costDiv);
                    championCard.appendChild(controlsDiv);
                    
                    // Agregar ítems si existen
                    if (champion.items && champion.items.length > 0) {
                        champion.items.forEach(itemId => {
                            const itemBadge = document.createElement('div');
                            itemBadge.className = 'item-badge absolute -right-1 sm:-right-2 -top-1 sm:-top-2 bg-gray-800 bg-opacity-80 rounded-full p-1 sm:p-2';
                            itemBadge.setAttribute('data-item-id', itemId);
                            
                            const itemImg = document.createElement('img');
                            itemImg.src = `/items/${itemId}.png`;
                            itemImg.alt = `Item ${itemId}`;
                            itemImg.className = 'w-4 h-4 sm:w-6 sm:h-6 object-cover';
                            
                            itemBadge.appendChild(itemImg);
                            championCard.appendChild(itemBadge);
                        });
                    }
                    
                    hexContent.appendChild(championCard);
                });
                
                // Actualizar el estado visual
                updateChampionsVisualState();
                
                showToast('Composición importada correctamente');
            } catch (error) {
                console.error('Error al importar la composición:', error);
                showToast('Error al importar la composición', true);
            }
            
            // Resetear el input
            input.value = '';
        };
        
        reader.onerror = function() {
            showToast('Error al leer el archivo', true);
            // Resetear el input
            input.value = '';
        };
        
        reader.readAsText(file);
    }
    
    // Función para limpiar todo el tablero
    function clearBoard() {
        document.querySelectorAll('.hex-cell .hex-content').forEach(cell => {
            cell.innerHTML = '';
        });
        updateChampionsVisualState();
        showToast('Tablero limpiado correctamente');
    }
    
    // Evento para guardar la composición
    const saveBtn = document.getElementById('save-comp');
    if (saveBtn) {
        saveBtn.addEventListener('click', saveComposition);
    }
    
    // Evento para descargar la composición
    const downloadBtn = document.getElementById('download-comp');
    if (downloadBtn) {
        downloadBtn.addEventListener('click', downloadComposition);
    }
    
    // Evento para subir una composición
    const uploadInput = document.getElementById('upload-comp') as HTMLInputElement;
    if (uploadInput) {
        uploadInput.addEventListener('change', uploadComposition);
    }
    
    // Evento para limpiar el tablero
    const clearBtn = document.getElementById('clear-comp');
    if (clearBtn) {
        clearBtn.addEventListener('click', clearBoard);
    }
</script> 