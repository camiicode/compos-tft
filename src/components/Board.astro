---
import { getChampions, getItems } from '../services/riotApi';
import type { Champion, Item, BoardCell } from '../types/tft';
import ItemSidebar from './ItemSidebar.astro';
import ActionsForMyComposition from './ActionsForMyComposition.astro';
import ListPropsForMyCompositions from './ListPropsForMyComposition.astro';

const champions = await getChampions();
const items = await getItems();

// Crear el tablero vacío con 4 filas
const board: BoardCell[] = [];
for (let row = 0; row < 4; row++) {
    for (let col = 0; col < 7; col++) {
        board.push({
            id: `cell-${row}-${col}`,
            champion: null,
            position: { row, col }
        });
    }
}
---

<main class="min-h-screen bg-gray-900 text-white p-4">
    
    <div class="ml-16">
        <div class="max-w-7xl mx-auto">
            <div class="flex flex-col sm:flex-row justify-between items-center mb-4 gap-2">
                <h1 class="text-xl sm:text-2xl font-bold">TFT Compositor</h1>
                <ActionsForMyComposition />
            </div>
            
            <div class="board-container relative">
                <ItemSidebar />
                <div class="board-grid" id="board">
                    {board.map((cell) => (
                        <div
                            class="hex-cell relative"
                            data-cell-id={cell.id}
                            data-row={cell.position.row}
                            data-col={cell.position.col}
                        >
                            <div class="hex-content">
                                {cell.champion && (
                                    <div class="champion-card relative" class:list={[
                                        "border-2",
                                        {
                                            "border-gray-400": cell.champion.cost === 1,
                                            "border-green-500": cell.champion.cost === 2,
                                            "border-blue-500": cell.champion.cost === 3,
                                            "border-purple-500": cell.champion.cost === 4,
                                            "border-orange-500": cell.champion.cost >= 5
                                        }
                                    ]}>
                                        <img 
                                            src={cell.champion.icon} 
                                            alt={cell.champion.name} 
                                            title={cell.champion.name}
                                            class="w-10 h-10 sm:w-16 sm:h-16 rounded-full object-cover object-right"
                                        />
                                        <div class="star-level absolute -top-2 sm:-top-5 left-1/2 transform -translate-x-1/2 text-yellow-400 text-xs sm:text-base">
                                            {'⭐'.repeat(cell.champion.level || 1)}
                                        </div>
                                        
                                        <div class="champion-controls absolute -top-1 sm:-top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10">
                                            <button class="decrease-level bg-red-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs" title="Disminuir nivel">
                                                -
                                            </button>
                                            <button class="increase-level bg-green-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs" title="Aumentar nivel">
                                                +
                                            </button>
                                            <button class="remove-champion bg-gray-600 text-white rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center text-xs" title="Eliminar campeón">
                                                ×
                                            </button>
                                        </div>
                                        
                                        {cell.champion.items && cell.champion.items.length > 0 && (
                                            <div class="items-container absolute -bottom-4 sm:-bottom-8 left-1/2 transform -translate-x-1/2 flex justify-center gap-1">
                                                {cell.champion.items.map((item) => (
                                                    <img 
                                                        src={item.icon} 
                                                        alt={item.name} 
                                                        title={item.name}
                                                        class="w-4 h-4 sm:w-6 sm:h-6 object-cover object-right border-2 border-yellow-400"
                                                    />
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">

                <ListPropsForMyCompositions
                    title="Campeones"
                    type="champions"
                    columns={5}
                    rows={2}
                />

                <ListPropsForMyCompositions
                    title="Objetos"
                    type="objects"
                    columns={5}
                    rows={2}
                />
            </div>
        </div>
    </div>
</main>

<script>
    // Encapsulamos todo en una función para evitar conflictos globales
    (function initializeBoard() {
        // Variables locales al scope de la función
        const boardElement = document.getElementById('board');
        const boardChampionCards = document.querySelectorAll('#board .champion-item');
        const boardItemCards = document.querySelectorAll('#board .item-card');
        const boardCells = document.querySelectorAll('#board .hex-cell');

        function isChampionOnBoard(championId: string): boolean {
            const boardCells = document.querySelectorAll('#board .hex-content');
            for (const cell of boardCells) {
                const championCard = cell.querySelector('.champion-card');
                if (championCard) {
                    const img = championCard.querySelector('img');
                    if (img && img.getAttribute('data-champion-id') === championId) {
                        return true;
                    }
                }
            }
            return false;
        }

        function updateChampionsVisualState(): void {
            const championsList = document.querySelectorAll('#board .champion-item');
            
            championsList.forEach(card => {
                const championId = card.getAttribute('data-champion-id');
                if (championId && isChampionOnBoard(championId)) {
                    card.classList.add('opacity-50');
                    card.setAttribute('data-on-board', 'true');
                    card.setAttribute('draggable', 'false');
                } else {
                    card.classList.remove('opacity-50');
                    card.removeAttribute('data-on-board');
                    card.setAttribute('draggable', 'true');
                }
            });
        }

        // Eventos para campeones del tablero
        boardChampionCards.forEach(card => {
            card.addEventListener('dragstart', function(e: Event) {
                const dragEvent = e as DragEvent;
                const championId = card.getAttribute('data-champion-id');
                if (championId && isChampionOnBoard(championId)) {
                    dragEvent.preventDefault();
                    return;
                }
                
                if (dragEvent.dataTransfer) {
                    dragEvent.dataTransfer.setData('text/plain', championId || '');
                    card.classList.add('opacity-50');
                }
            });

            card.addEventListener('dragend', function() {
                card.classList.remove('opacity-50');
            });
        });

        // Eventos para items del tablero
        boardItemCards.forEach(card => {
            card.addEventListener('dragstart', function(e: Event) {
                const dragEvent = e as DragEvent;
                if (dragEvent.dataTransfer) {
                    dragEvent.dataTransfer.setData('text/plain', card.getAttribute('data-item-id') || '');
                    card.classList.add('opacity-50');
                }
            });

            card.addEventListener('dragend', function() {
                card.classList.remove('opacity-50');
            });
        });

        // Función para gestionar los controles del campeón
        function setupChampionControls(championCard: Element) {
            const increaseBtn = championCard.querySelector('.increase-level');
            const decreaseBtn = championCard.querySelector('.decrease-level');
            const removeBtn = championCard.querySelector('.remove-champion');
            const levelElement = championCard.querySelector('.star-level');
            
            if (increaseBtn && levelElement) {
                increaseBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const starsText = levelElement.textContent || '⭐';
                    const currentLevel = starsText.length;
                    if (currentLevel < 3) {
                        levelElement.textContent = '⭐'.repeat(currentLevel + 1);
                    }
                });
            }
            
            if (decreaseBtn && levelElement) {
                decreaseBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const starsText = levelElement.textContent || '⭐';
                    const currentLevel = starsText.length;
                    if (currentLevel > 1) {
                        levelElement.textContent = '⭐'.repeat(currentLevel - 1);
                    }
                });
            }
            
            if (removeBtn) {
                removeBtn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const hexContent = championCard.closest('.hex-content');
                    if (hexContent) {
                        hexContent.innerHTML = '';
                        updateChampionsVisualState();
                    }
                });
            }
        }

        // Actualizar los eventos de las celdas
        boardCells.forEach(cell => {
            cell.addEventListener('dragover', function(e: Event) {
                e.preventDefault();
                cell.classList.add('drag-over');
            });

            cell.addEventListener('dragleave', function() {
                cell.classList.remove('drag-over');
            });

            cell.addEventListener('drop', function(e: Event) {
                e.preventDefault();
                cell.classList.remove('drag-over');
                
                const dragEvent = e as DragEvent;
                if (!dragEvent.dataTransfer) return;

                const data = dragEvent.dataTransfer.getData('text/plain');
                const hexContent = cell.querySelector('.hex-content');
                if (!hexContent) return;

                // Aquí va la lógica de drop...
            });
        });

        // Inicialización
        updateChampionsVisualState();
    })();
</script>

<style is:inline>
    .champion-card.border-gray-400,
    .champion-card.border-green-500,
    .champion-card.border-blue-500,
    .champion-card.border-purple-500,
    .champion-card.border-orange-500 {
        border: 0px solid transparent !important;
    }
</style>

<style>
    .board-container {
        padding: 15px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        margin-bottom: 20px;
        width: 100%;
        overflow: visible;
    }

    .board-grid {
        display: grid;
        grid-template-rows: repeat(4, 90px);
        grid-template-columns: repeat(7, 1fr);
        gap: 10px 5px;
        position: relative;
        max-width: 90%;
        margin: 0 2rem;
    }

    .hex-cell {
        width: 90%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.5));
        transition: filter 0.3s ease;
    }
    
    .hex-cell,
    .hex-cell::before,
    .hex-cell::after {
        border: none !important;
    }
    
    .hex-cell:has(.champion-card.border-gray-400) {
        filter: drop-shadow(0 0 5px rgba(156, 163, 175, 0.95));
    }
    
    .hex-cell:has(.champion-card.border-green-500) {
        filter: drop-shadow(0 0 5px rgba(34, 197, 94, 0.95));
    }
    
    .hex-cell:has(.champion-card.border-blue-500) {
        filter: drop-shadow(0 0 5px rgba(59, 130, 246, 0.95));
    }
    
    .hex-cell:has(.champion-card.border-purple-500) {
        filter: drop-shadow(0 0 5px rgba(168, 85, 247, 0.95));
    }
    
    .hex-cell:has(.champion-card.border-orange-500) {
        filter: drop-shadow(0 0 5px rgba(249, 115, 22, 0.95));
    }

    .hex-cell::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 90%;
        height: 100%;
        background: #1a1c2c;
        clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
        transition: background-color 0.2s;
    }

    .hex-cell::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 90%;
        height: 100%;
        background: none;
        clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);        transition: box-shadow 0.2s;
        pointer-events: none;
    }

    .hex-cell:hover::before {
        background: #2a2c3c;
    }

    .hex-content {
        position: absolute;
        top: 50%;
        left: 45%;
        transform: translate(-50%, -50%);
        z-index: 1;
        width: 90%;
        height: 90%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .board-grid > .hex-cell:nth-child(n+8):nth-child(-n+14) {
        transform: translate(50%);
    }

    .board-grid > .hex-cell:nth-child(n+22):nth-child(-n+28) {
        transform: translate(50%);
    }

    .champion-card {
        transition: transform 0.2s;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: transparent;
        padding: 2px;
        border-radius: 8px;
    }
    
    .champion-card:hover {
        transform: scale(1.05);
    }
    
    .champion-controls {
        transition: opacity 0.2s ease;
    }
    
    .cost-badge {
        z-index: 5;
        font-size: 0.7rem;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
    }
    
    .star-level {
        text-shadow: 0 0 3px rgba(0, 0, 0, 0.8);
        font-size: 0.7rem;
    }
    
    .items-container {
        z-index: 4;
    }
    
    .item-card, .champion-card-grid {
        transition: transform 0.2s;
    }
    
    .item-card:hover, .champion-card-grid:hover {
        transform: scale(1.05);
    }

    .hex-cell.drag-over::before {
        background: #3a3c4c;
    }

    .transition-opacity {
        transition: opacity 0.3s ease;
    }
    
    @media (min-width: 768px) {
        .board-container {
            padding: 20px;
        }
        
        .board-grid {
            grid-template-rows: repeat(4, 100px);
            gap: 0px 10px;
        }
        
        .hex-cell {
            width: 95%;
            height: 95px;
        }
        
        .board-grid > .hex-cell:nth-child(n+8):nth-child(-n+14) {
            transform: translate(50%);
        }
        
        .board-grid > .hex-cell:nth-child(n+22):nth-child(-n+28) {
            transform: translate(50%);
        }
        
        .cost-badge {
            font-size: 0.75rem;
        }
        
        .star-level {
            font-size: 0.8rem;
        }
    }
    
    @media (min-width: 1024px) {
        .board-container {
            padding: 30px;
        }
        
        .board-grid {
            grid-template-rows: repeat(4, 120px);
            gap: 0px 15px;
        }
        
        .hex-cell {
            width: 100%;
            height: 115px;
        }
        
        .board-grid > .hex-cell:nth-child(n+8):nth-child(-n+14) {
            transform: translate(50%);
        }
        
        .board-grid > .hex-cell:nth-child(n+22):nth-child(-n+28) {
            transform: translate(50%);
        }
    }
    
    @media (max-width: 380px) {
        .board-grid {
            grid-template-rows: repeat(4, 70px);
            gap: 8px 4px;
        }
        
        .hex-cell {
            width: 85%;
            height: 65px;
        }
        
        .cost-badge, .star-level {
            font-size: 0.6rem;
        }
    }

    .champion-item {
        transition: all 0.2s ease;
    }
    
    .champion-item:hover {
        transform: scale(1.05);
    }
    
    .champion-item.border-gray-400 {
        box-shadow: 0 0 5px rgba(156, 163, 175, 0.5);
    }
    
    .champion-item.border-green-500 {
        box-shadow: 0 0 5px rgba(34, 197, 94, 0.5);
    }
    
    .champion-item.border-blue-500 {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
    }
    
    .champion-item.border-purple-500 {
        box-shadow: 0 0 5px rgba(168, 85, 247, 0.5);
    }
    
    .champion-item.border-orange-500 {
        box-shadow: 0 0 5px rgba(249, 115, 22, 0.5);
    }
    
    .initial-hidden {
        display: none;
    }
</style>

<footer class="mt-8 py-4 border-t border-gray-800 text-center text-xs sm:text-sm text-gray-400">
    <h1 class="underline">Descargo de responsabilidad</h1>
    <p>TFT Compositor no está asociado por Riot Games y no refleja los puntos de vista ni las opiniones de Riot Games o de cualquier persona oficialmente involucrada en la producción o administración de Teamfight Tactics.</p>
    <p class="mt-2">Teamfight Tactics y Riot Games son marcas comerciales o marcas registradas de Riot Games, Inc.</p>
    <p class="mt-2">© {new Date().getFullYear()} Camiicodes. Todos los derechos reservados.</p>
</footer> 