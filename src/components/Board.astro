---
import { getChampions, getItems } from '../services/riotApi';
import type { Champion, Item, BoardCell } from '../types/tft';

const champions = await getChampions();
const items = await getItems();

// Crear el tablero vac√≠o con 3 filas
const board: BoardCell[] = [];
for (let row = 0; row < 3; row++) {
    for (let col = 0; col < 7; col++) {
        board.push({
            id: `cell-${row}-${col}`,
            champion: null,
            position: { row, col }
        });
    }
}
---

<div class="max-w-screen-xl mx-auto px-4">
    <div class="board-container">
        <div class="board-grid" id="board">
            {board.map((cell) => (
                <div
                    class="hex-cell"
                    data-cell-id={cell.id}
                    data-row={cell.position.row}
                    data-col={cell.position.col}
                >
                    <div class="hex-content">
                        {cell.champion && (
                            <div class="champion-card relative">
                                <img 
                                    src={cell.champion.icon} 
                                    alt={cell.champion.name} 
                                    title={cell.champion.name}
                                    class="w-16 h-16 rounded-full object-cover object-right"
                                />
                                <div class="star-level absolute -top-2 left-1/2 transform -translate-x-1/2 text-yellow-400">
                                    {'‚≠ê'.repeat(cell.champion.level || 1)}
                                </div>
                                
                                <div class="champion-controls absolute -top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10">
                                    <button class="decrease-level bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs" title="Disminuir nivel">
                                        -
                                    </button>
                                    <button class="increase-level bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs" title="Aumentar nivel">
                                        +
                                    </button>
                                    <button class="remove-champion bg-gray-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs" title="Eliminar campe√≥n">
                                        √ó
                                    </button>
                                </div>
                                
                                <div class="cost-badge mt-1 absolute -bottom-2 left-1/2 transform -translate-x-1/2 bg-gray-800 bg-opacity-80 rounded-full px-2 py-1 text-sm flex items-center">
                                    <span class="mr-1">ü•Æ</span> {cell.champion.cost}
                                </div>
                                
                                {cell.champion.items && cell.champion.items.length > 0 && (
                                    <div class="items-container absolute -bottom-4 left-1/2 transform -translate-x-1/2 flex justify-center gap-1">
                                        {cell.champion.items.map((item) => (
                                            <img 
                                                src={item.icon} 
                                                alt={item.name} 
                                                title={item.name}
                                                class="w-6 h-6 object-cover border-1 border-solid border-yellow-600 object-right"
                                            />
                                        ))}
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </div>
            ))}
        </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        <div class="champions-container">
            <div class="flex justify-between items-center mb-2">
                <h2 class="text-xl font-bold">Campeones Disponibles</h2>
                <div class="flex space-x-2">
                    <button id="show-more-champions" class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-sm">
                        Ver m√°s
                    </button>
                    <button id="hide-champions" class="bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded text-sm">
                        Ver menos
                    </button>
                </div>
            </div>
            <div class="mb-4">
                <input 
                    type="text" 
                    id="champion-search" 
                    placeholder="Buscar campe√≥n..." 
                    class="w-full p-2 bg-gray-800 rounded-lg text-white"
                />
            </div>
            <div class="grid grid-cols-4 md:grid-cols-5 gap-2" id="champions-list">
                {champions.map((champion, index) => (
                    <div
                        class={`champion-card-grid bg-gray-800 rounded-lg p-2 cursor-move ${index >= 15 ? 'hidden initial-hidden' : ''}`}
                        draggable="true"
                        data-champion-id={champion.id}
                    >
                        <div class="flex flex-col items-center h-full relative">
                            <img 
                                src={champion.icon} 
                                alt={champion.name} 
                                title={champion.name}
                                class="w-16 h-16 rounded-full object-cover object-right"
                            />
                            <div class="absolute top-0 right-0 bg-yellow-500 text-black rounded-full w-6 h-6 flex items-center justify-center" title="Costo">
                                {champion.cost}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>

        <div class="items-container">
            <div class="flex justify-between items-center mb-2">
                <h2 class="text-xl font-bold">Items Disponibles</h2>
                <div class="flex space-x-2">
                    <button id="show-more-items" class="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-sm">
                        Ver m√°s
                    </button>
                    <button id="hide-items" class="bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded text-sm">
                        Ver menos
                    </button>
                </div>
            </div>
            <div class="mb-4">
                <input 
                    type="text" 
                    id="item-search" 
                    placeholder="Buscar item..." 
                    class="w-full p-2 bg-gray-800 rounded-lg text-white"
                />
            </div>
            <div class="grid grid-cols-4 md:grid-cols-5 gap-2" id="items-list">
                {items.map((item, index) => (
                    <div
                        class={`item-card bg-gray-800 rounded-lg p-2 cursor-move ${index >= 10 ? 'hidden initial-hidden' : ''}`}
                        draggable="true"
                        data-item-id={item.id}
                    >
                        <div class="flex flex-col items-center h-full relative">
                            <img 
                                src={item.icon} 
                                alt={item.name} 
                                title={item.name}
                                class="w-16 h-16 rounded-full object-cover object-right"
                            />
                            <p class="text-xs mt-1 text-center text-gray-300">{item.name}</p>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
</div>

<script>
    // Funcionalidad para mostrar m√°s campeones
    const showMoreChampionsBtn = document.getElementById('show-more-champions');
    const hideChampionsBtn = document.getElementById('hide-champions');
    const hiddenChampions = document.querySelectorAll('#champions-list .initial-hidden');
    
    if (showMoreChampionsBtn) {
        showMoreChampionsBtn.addEventListener('click', function() {
            hiddenChampions.forEach(card => {
                card.classList.remove('hidden');
            });
            showMoreChampionsBtn.style.display = 'none';
            if (hideChampionsBtn) {
                hideChampionsBtn.style.display = '';
            }
        });
    }
    
    if (hideChampionsBtn) {
        hideChampionsBtn.addEventListener('click', function() {
            hiddenChampions.forEach(card => {
                card.classList.add('hidden');
            });
            if (showMoreChampionsBtn) {
                showMoreChampionsBtn.style.display = '';
            }
        });
    }
    
    // Funcionalidad para mostrar m√°s items
    const showMoreItemsBtn = document.getElementById('show-more-items');
    const hideItemsBtn = document.getElementById('hide-items');
    const hiddenItems = document.querySelectorAll('#items-list .initial-hidden');
    
    if (showMoreItemsBtn) {
        showMoreItemsBtn.addEventListener('click', function() {
            hiddenItems.forEach(card => {
                card.classList.remove('hidden');
            });
            showMoreItemsBtn.style.display = 'none';
            if (hideItemsBtn) {
                hideItemsBtn.style.display = '';
            }
        });
    }
    
    if (hideItemsBtn) {
        hideItemsBtn.addEventListener('click', function() {
            hiddenItems.forEach(card => {
                card.classList.add('hidden');
            });
            if (showMoreItemsBtn) {
                showMoreItemsBtn.style.display = '';
            }
        });
    }

    // Funcionalidad de b√∫squeda
    const championSearch = document.getElementById('champion-search') as HTMLInputElement;
    const itemSearch = document.getElementById('item-search') as HTMLInputElement;
    const championsList = document.getElementById('champions-list');
    const itemsList = document.getElementById('items-list');
    
    // Funci√≥n para filtrar elementos
    function filterElements(searchInput: HTMLInputElement, listElement: HTMLElement | null, itemClass: string) {
        if (!searchInput || !listElement) return;
        
        const searchTerm = searchInput.value.toLowerCase();
        const items = listElement.querySelectorAll(`.${itemClass}`);
        let visibleCount = 0;
        
        items.forEach(item => {
            const titleAttr = item.querySelector('[title]')?.getAttribute('title')?.toLowerCase() || '';
            
            if (titleAttr.includes(searchTerm)) {
                (item as HTMLElement).style.display = '';
                item.classList.remove('hidden');
                visibleCount++;
            } else {
                (item as HTMLElement).style.display = 'none';
            }
        });
        
        // Si hay b√∫squeda, ocultar los botones de mostrar/ocultar
        const showMoreBtn = listElement.id === 'champions-list' ? 
            document.getElementById('show-more-champions') : 
            document.getElementById('show-more-items');
        const hideBtn = listElement.id === 'champions-list' ? 
            document.getElementById('hide-champions') : 
            document.getElementById('hide-items');
            
        if (showMoreBtn && hideBtn) {
            showMoreBtn.style.display = searchTerm ? 'none' : '';
            hideBtn.style.display = searchTerm ? 'none' : '';
        }
    }
    
    // Eventos de b√∫squeda
    championSearch.addEventListener('input', () => {
        filterElements(championSearch, championsList, 'champion-card-grid');
    });
    
    itemSearch.addEventListener('input', () => {
        filterElements(itemSearch, itemsList, 'item-card');
    });
    
    // Funcionalidad de arrastrar y soltar
    const board = document.getElementById('board');
    const championCards = document.querySelectorAll('.champion-card-grid');
    const itemCards = document.querySelectorAll('.item-card');
    const cells = document.querySelectorAll('.hex-cell');

    // Eventos para campeones
    championCards.forEach(card => {
        card.addEventListener('dragstart', function(e: Event) {
            const dragEvent = e as DragEvent;
            if (dragEvent.dataTransfer) {
                dragEvent.dataTransfer.setData('text/plain', card.getAttribute('data-champion-id') || '');
                card.classList.add('opacity-50');
            }
        });

        card.addEventListener('dragend', function() {
            card.classList.remove('opacity-50');
        });
    });

    // Eventos para items
    itemCards.forEach(card => {
        card.addEventListener('dragstart', function(e: Event) {
            const dragEvent = e as DragEvent;
            if (dragEvent.dataTransfer) {
                dragEvent.dataTransfer.setData('text/plain', card.getAttribute('data-item-id') || '');
                card.classList.add('opacity-50');
            }
        });

        card.addEventListener('dragend', function() {
            card.classList.remove('opacity-50');
        });
    });

    // Funci√≥n para gestionar los controles del campe√≥n
    function setupChampionControls(championCard: Element) {
        const increaseBtn = championCard.querySelector('.increase-level');
        const decreaseBtn = championCard.querySelector('.decrease-level');
        const removeBtn = championCard.querySelector('.remove-champion');
        const levelElement = championCard.querySelector('.star-level');
        
        if (increaseBtn && levelElement) {
            increaseBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const starsText = levelElement.textContent || '‚≠ê';
                const currentLevel = starsText.length;
                if (currentLevel < 3) {
                    levelElement.textContent = '‚≠ê'.repeat(currentLevel + 1);
                }
            });
        }
        
        if (decreaseBtn && levelElement) {
            decreaseBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const starsText = levelElement.textContent || '‚≠ê';
                const currentLevel = starsText.length;
                if (currentLevel > 1) {
                    levelElement.textContent = '‚≠ê'.repeat(currentLevel - 1);
                }
            });
        }
        
        if (removeBtn) {
            removeBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const hexContent = championCard.closest('.hex-content');
                if (hexContent) {
                    hexContent.innerHTML = '';
                }
            });
        }
    }

    // Actualizar los eventos de las celdas
    cells.forEach(cell => {
        cell.addEventListener('dragover', function(e: Event) {
            e.preventDefault();
            cell.classList.add('drag-over');
        });

        cell.addEventListener('dragleave', function() {
            cell.classList.remove('drag-over');
        });

        cell.addEventListener('drop', function(e: Event) {
            e.preventDefault();
            cell.classList.remove('drag-over');
            
            const dropEvent = e as DragEvent;
            if (!dropEvent.dataTransfer) return;
            
            const id = dropEvent.dataTransfer.getData('text/plain');
            const championCard = document.querySelector(`[data-champion-id="${id}"]`);
            const itemCard = document.querySelector(`[data-item-id="${id}"]`);

            if (championCard) {
                // Si ya hay un campe√≥n en la celda, incrementar su nivel
                const existingChampion = cell.querySelector('.champion-card');
                if (existingChampion) {
                    const levelElement = existingChampion.querySelector('.star-level');
                    if (levelElement) {
                        const starsText = levelElement.textContent || '‚≠ê';
                        const currentLevel = starsText.length;
                        if (currentLevel < 3) {
                            levelElement.textContent = '‚≠ê'.repeat(currentLevel + 1);
                        }
                    }
                } else {
                    // Si la celda est√° vac√≠a, crear una nueva tarjeta de campe√≥n
                    const champImg = championCard.querySelector('img');
                    const champCost = championCard.querySelector('.bg-yellow-500')?.textContent || '1';
                    
                    if (champImg) {
                        const hexContent = cell.querySelector('.hex-content');
                        if (hexContent) {
                            const newChampion = document.createElement('div');
                            newChampion.className = 'champion-card relative';
                            
                            // Copiar la imagen
                            const newImg = document.createElement('img');
                            newImg.src = champImg.src;
                            newImg.alt = champImg.alt;
                            newImg.title = champImg.title;
                            newImg.className = 'w-16 h-16 rounded-full object-cover object-right';
                            
                            // A√±adir las estrellas
                            const levelDiv = document.createElement('div');
                            levelDiv.className = 'star-level absolute -top-5 left-1/2 transform -translate-x-1/2 text-yellow-400';
                            levelDiv.textContent = '‚≠ê';
                            
                            // A√±adir el costo
                            const costDiv = document.createElement('div');
                            costDiv.className = 'cost-badge absolute -bottom-2 left-1/2 transform -translate-x-1/2 bg-gray-800 bg-opacity-80 rounded-full px-2 py-1 text-sm flex items-center';
                            costDiv.innerHTML = `<span class="mr-1">ü•Æ</span> ${champCost}`;
                            
                            // A√±adir controles
                            const controlsDiv = document.createElement('div');
                            controlsDiv.className = 'champion-controls absolute -top-1 left-0 right-0 opacity-0 transition-opacity flex justify-center space-x-1 z-10';
                            
                            const decreaseBtn = document.createElement('button');
                            decreaseBtn.className = 'decrease-level bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs';
                            decreaseBtn.title = 'Disminuir nivel';
                            decreaseBtn.textContent = '-';
                            
                            const increaseBtn = document.createElement('button');
                            increaseBtn.className = 'increase-level bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs';
                            increaseBtn.title = 'Aumentar nivel';
                            increaseBtn.textContent = '+';
                            
                            const removeBtn = document.createElement('button');
                            removeBtn.className = 'remove-champion bg-gray-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs';
                            removeBtn.title = 'Eliminar campe√≥n';
                            removeBtn.textContent = '√ó';
                            
                            controlsDiv.appendChild(decreaseBtn);
                            controlsDiv.appendChild(increaseBtn);
                            controlsDiv.appendChild(removeBtn);
                            
                            newChampion.appendChild(newImg);
                            newChampion.appendChild(levelDiv);
                            newChampion.appendChild(costDiv);
                            newChampion.appendChild(controlsDiv);
                            hexContent.appendChild(newChampion);
                            
                            // Configurar los controles del nuevo campe√≥n
                            setupChampionControls(newChampion);
                        }
                    }
                }
            } else if (itemCard) {
                // Agregar item al campe√≥n si hay uno en la celda
                const championCard = cell.querySelector('.champion-card');
                if (championCard) {
                    const itemImg = itemCard.querySelector('img');
                    if (itemImg) {
                        const itemsContainer = championCard.querySelector('.items-container') || 
                            document.createElement('div');
                            
                        if (!itemsContainer.classList.contains('items-container')) {
                            itemsContainer.className = 'items-container absolute -bottom-8 left-1/2 transform -translate-x-1/2 flex justify-center gap-1';
                            championCard.appendChild(itemsContainer);
                        }
                        
                        // Limitar a 3 objetos m√°ximo
                        const currentItems = itemsContainer.querySelectorAll('img');
                        if (currentItems.length < 3) {
                            // Copiar la imagen del item
                            const newItemImg = document.createElement('img');
                            newItemImg.src = itemImg.src;
                            newItemImg.alt = itemImg.alt;
                            newItemImg.title = itemImg.title;
                            newItemImg.className = 'w-6 h-6 object-cover border-1 border-solid border-yellow-600 object-right';
                            
                            itemsContainer.appendChild(newItemImg);
                        }
                    }
                }
            }
        });
    });
    
    // Configurar eventos para los botones de control del campe√≥n para cada campe√≥n existente
    document.querySelectorAll('.champion-card').forEach(championCard => {
        setupChampionControls(championCard);
    });
    
    // Mostrar controles al hacer hover
    document.addEventListener('mouseover', function(e) {
        const target = e.target as Element;
        const championCard = target.closest('.champion-card');
        if (championCard) {
            const controls = championCard.querySelector('.champion-controls');
            if (controls) {
                (controls as HTMLElement).style.opacity = '1';
            }
        }
    });
    
    document.addEventListener('mouseout', function(e) {
        const target = e.target as Element;
        const championCard = target.closest('.champion-card');
        if (championCard) {
            const controls = championCard.querySelector('.champion-controls');
            if (controls) {
                (controls as HTMLElement).style.opacity = '0';
            }
        }
    });
</script>

<style>
    .board-container {
        padding: 30px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        margin-bottom: 20px;
        width: 100%;
        overflow: visible;
    }

    .board-grid {
        display: grid;
        grid-template-rows: repeat(3, 120px);
        grid-template-columns: repeat(7, 1fr);
        gap: 15px 0px;
        position: relative;
    }

    .hex-cell {
        width: 80%;
        height: 110px;
        position: relative;
        filter: drop-shadow(0px 0px 1px white);
    }

    /* Fondo del hex√°gono */
    .hex-cell::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #1a1c2c;
        clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
        transition: background-color 0.2s;
    }

    /* Borde del hex√°gono */
    .hex-cell::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: none;
        clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
        box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.3);
        transition: box-shadow 0.2s;
        pointer-events: none;
    }

    .hex-cell:hover::before {
        background: #2a2c3c;
    }
    
    .hex-cell:hover::after {
        box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.5);
    }

    .hex-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1;
        width: 90%;
        height: 90%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Ajustar posici√≥n de las filas para el patr√≥n escalonado */
    .board-grid > .hex-cell:nth-child(n+8):nth-child(-n+14) {
        transform: translateX(calc(50% - 15px));
    }

    .champion-card {
        transition: transform 0.2s;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: transparent;
        padding: 4px;
        border-radius: 8px;
    }
    
    .champion-card:hover {
        transform: scale(1.05);
    }
    
    .champion-controls {
        transition: opacity 0.2s ease;
    }
    
    .cost-badge {
        z-index: 5;
        font-size: 0.75rem;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
    }
    
    .star-level {
        text-shadow: 0 0 3px rgba(0, 0, 0, 0.8);
        font-size: 0.8rem;
    }
    
    .items-container {
        z-index: 4;
    }
    
    .item-card {
        transition: transform 0.2s;
    }
    
    .item-card:hover {
        transform: scale(1.05);
    }

    /* Estilo para cuando se est√° arrastrando sobre la celda */
    .hex-cell.drag-over::before {
        background: #3a3c4c;
    }
    
    .hex-cell.drag-over::after {
        box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.7);
    }

    .champion-card .text-center {
        background: rgba(26, 28, 44, 0.8);
        padding: 8px;
        border-radius: 6px;
        width: 100%;
    }

    @media (max-width: 1024px) {
        .board-grid {
            grid-template-rows: repeat(3, 100px);
            gap: 10px 25px;
        }
        
        .hex-cell {
            height: 90px;
        }
    }

    @media (max-width: 768px) {
        .board-grid {
            grid-template-rows: repeat(3, 80px);
            gap: 8px 18px;
        }
        
        .hex-cell {
            height: 70px;
        }
        
        .champion-card .text-center {
            padding: 4px;
            font-size: 0.8rem;
        }
    }
</style> 